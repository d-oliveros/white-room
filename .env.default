# This file defaults environmental variables in the container's environment.
#
# To configure this application's instance,
# copy this file to a file called .env in this same directory,
# and modify the values according to the instance's purpose.
#
# Alternatively, you can define these environmental variables
# in your server's environment.

##
## Instance configuration.
##

# Node environment
NODE_ENV="development"

# Change to "true" to serve the minified bundle. You can build the webapp bundle with "npm run build"
USE_BUILD="false"

# App Settings
APP_TITLE="White Room"
APP_ID="whiteroom"
APP_EMAIL="hello@whiteroom.com"
APP_URL="http://localhost:3000"
TZ=America/Chicago

# Enables the main API server, which serves client requests and API calls.
ENABLE_SERVER="true"

# Enables the Renderer server, in charge of rendering the web app on server-side
# In production, you may want to separate the Renderer server and the API server
# in different processes, as server-side rendering can get quite CPU-intensive
# and you don't want to affect your API server's performance, do you?
ENABLE_RENDERER="true"

# Enables processing the queue.
ENABLE_QUEUE="true"
QUEUE_ID="whiteroom"

# Enables the processment of periodic tasks
# The cron patterns are defined in /cron/crontab.json, and the cron jobs are located
# in /src/cron/tasks. To create a new periodic job, create a new
# file in the cron tasks dir, and add the new cron task's pattern in /cron/crontab.json
ENABLE_CRON="true"

# If enabled, will run the DB migrations on startup
ENABLE_MIGRATIONS="true"

# Defines the cron whitelist.
CRON_WHITELIST=""

# Server's listening port.
APP_PORT="3000"

# Port for the "Renderer" microservice, which renders the React application
# on serverside, prior to sending the fully rendered HTML.
RENDERER_PORT="3001"

# Absolute path to the renderer microservice.
# Useful when the application's API and the application's renderer microservices
# are hosted on the same server.
RENDERER_ENDPOINT="http://localhost:3001"

# Enables debug messages
DEBUG=whiteroom*

# Disables logging
NO_LOG_MODE=""

# Exposes the storybook route. Storybook has to be previously built for this to work: npm run build-storybook
ENABLE_STORYBOOK="false"

# Configure the "robots" HTML metatag
HTML_ROBOTS_TAG=""

# If USE_BUILD is true, you'll need to specify a bundle commit hash.
COMMIT_HASH=""

# JSON Web Token configuration.
JWT_KEY="local"

# Signed cookies secret key
COOKIE_SECRET="cookiesecret"

# Application's encryption keys
ENCRYPTION_KEY="encryptionkey"

# Phone verification magic pass-through code
PHONE_VERIFICATION_MAGIC_CODE="1234"

# For development only. Webpack development server port.
WEBPACK_DEVELOPMENT_SERVER_PORT="8001"


##
## DB configuration.
##

# Postgres
POSTGRES_HOST="127.0.0.1"
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="postgres"
POSTGRES_DATABASE="whiteroom_dev"


# Redis
REDIS_DB="0"
REDIS_HOST="127.0.0.1"
REDIS_PORT="6379"
REDIS_AUTH=""


##
## AWS configuration.
##

AWS_ACCESS_KEY=""
AWS_SECRET_KEY=""
AWS_REGION="us-east-1"
AWS_FILE_UPLOADS_BUCKET=""
AWS_BUNDLES_URL=""


##
## Integrations
##

# Segment
SEGMENT_KEY=""
SEGMENT_LIB_PROXY_URL="" # e.g. https://cdn-sgmt.whiteroom.com

# Slack
SLACK_ENDPOINT=""
SLACK_REDIRECT_MESSAGES_CHANNEL=""
SLACK_NOTIFY_SMS_MESSAGES_CHANNEL=""
SLACK_NOTIFY_EMAIL_CHANNEL=""

# Twilio
TWILIO_ACCOUNT_ID=""
TWILIO_AUTH_TOKEN=""

# Authy
AUTHY_API_KEY=""

# Google
GOOGLE_API_KEY=""

# Firebase
FIREBASE_API_KEY=""

# DataDog
DATADOG_API_KEY="
DATADOG_APP_ID="
DATADOG_CLIENT_TOKEN="
