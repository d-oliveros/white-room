
# This file defaults environmental variables in the container's environment.
#
# To configure this application's instance,
# copy this file to a file called .env in this same directory,
# and modify the values according to the instance's purpose.
#
# Alternatively, you can define these environmental variables
# in your server's environment.


##
## Instance configuration.
##

# Enables the main API server, which serves client requests and API calls.
ENABLE_API = "true"

# Enables the Renderer server, in charge of rendering the web app on server-side
# In production, you may want to separate the Renderer server and the API server
# in different processes, as server-side rendering can get quite CPU-intensive
# and you don't want to affect your API server's performance, do you?
ENABLE_RENDERER = "true"

# Enables the processment of periodic tasks
# The cron patterns are defined in /config/cron, and the cron jobs are located
# in /src/server/modules/cron/jobs. To create a new periodic job, create a new
# file in the cron jobs dir, and add the new cron job's pattern in /config/cron
ENABLE_CRON = "true"

# Change to "true" to enable emails. You will need to provide your mandrill key.
USE_EMAILS = "false"

# Change to "true" to serve the minified bundle.
# You can build the webapp bundle with "npm run build"
USE_BUILD = "false"

# Servers's public host and domain.
APP_HOST = "http://localhost"
APP_DOMAIN = ""

# Server's listening port.
APP_PORT = "3000"

# Server's public port. Useful when the application is behind a
# web server or load balancer, for example when setting a nginx server
# between the front user and the node application.
PUBLIC_PORT= "3000"

# Port for the "Renderer" microservice, which renders the React application
# on serverside, prior to sending the fully rendered HTML.
RENDERER_PORT = "3001"

# Absolute path to the renderer microservice.
# Useful when the application's API and the application's renderer microservices
# are hosted on the same server.
RENDERER_ENDPOINT = "http://localhost:3001"

# JSON Web Token configuration.
JWT_KEY = "whiteroom_local"
JWT_TMP_EXPIRATION = "7d"

# Application's secret keys
SECRET = "localsecret"
SECRET_KEYS = "localsecret1,localsecret2,localsecret3"


##
## Email keys. You need to provide your keys in order to send emails.
##

MANDRILL_API_KEY = ""
MAILCHIMP_API_KEY = ""


##
## Social keys. You need to provide your keys in order to sign up with oAuth.
##

OAUTH_FACEBOOK_ID = ""
OAUTH_FACEBOOK_SECRET = ""

OAUTH_LINKEDIN_ID = ""
OAUTH_LINKEDIN_SECRET = ""

OAUTH_TWITTER_ID = ""
OAUTH_TWITTER_SECRET = ""

OAUTH_GOOGLE_ID = ""
OAUTH_GOOGLE_SECRET = ""


##
## MongoDB configuration.
##

MONGO_DB = "whiteroom_local"
MONGO_HOST = "127.0.0.1"
MONGO_REPLICA_SET = ""
MONGO_REPLICA_HOSTS = ""
MONGO_USER = ""
MONGO_PASS = ""
MONGO_PORT = ""


##
## Redis configuration.
##

REDIS_DB = "0"
REDIS_HOST = "127.0.0.1"
REDIS_PORT = "6379"
REDIS_AUTH = ""
CACHE_TTL = ""


##
## Neo4J. Uncomment to enable.
##

# NEO4J_URL = "http://localhost:7474"
# NEO4J_USER = ""
# NEO4J_PASS = ""
# NEO4J_TEST_URL = "http://localhost:7484"
# NEO4J_TEST_USER = ""
# NEO4J_TEST_PASS = ""


##
## Elasticsearch. Uncomment to enable.
##

# ELASTICSEARCH_HOST = "127.0.0.1:9200"
# ELASTICSEARCH_INDEX = "whiteroom_local"


##
## AWS S3 Bucket. Uncomment to enable.
##

# AWS_S3_ACCESS_KEY = ""
# AWS_S3_SECRET_KEY = ""
# AWS_S3_BUCKET = ""

# Provides the image's host.
# Useful when using a variable image hosting provider,
# like an amazon S3 bucket.
IMAGE_HOST = ""


##
## Analytics configuration.
##

LOGGLY_KEY = ""
LOGGLY_SUBDOMAIN = ""
SENTRY_KEY = ""
SEGMENT_KEY = ""


##
## Integrations
##

# Pygmy is a blazing-fast URL Shortner written in Go.
PYGMY_HOST = ""

# Enables the slack integration.
SLACK_CHANNEL = ""
SLACK_ENDPOINT = ""
